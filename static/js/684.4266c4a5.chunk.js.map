{"version":3,"file":"static/js/684.4266c4a5.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/Section/Section.styled.js","components/Section/Section.jsx","components/ContactList/ContactList.styled.js","components/Contact/Contact.styled.js","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","components/FilterContact/FilterBar.styled.js","components/FilterContact/FilterBar.jsx","pages/Contacts.jsx","HOC/withAuthRedirect.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledForm = styled.form`\n  & label {\n    display: flex;\n    flex-direction: column;\n    margin-top: 30px;\n    font-size: 30px;\n    width: 100%;\n  }\n\n  & input {\n    margin-top: 10px;\n    height: 30px;\n    width: 100%;\n    border-radius: 5px;\n    border: 1px solid #ccc;\n  }\n\n  & button {\n    margin-top: 15px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    padding: 5px 10px;\n    background-color: #ccc;\n    color: black;\n    font-size: 20px;\n    cursor: pointer;\n    &:hover,\n    &:focus {\n      background-color: #fff;\n      color: #000;\n      border: 1px solid #ccc;\n      box-shadow: rgba(0, 0, 0, 0.12) 0px 6px 12px,\n        rgba(0, 0, 0, 0.12) 0px 5px 5px;\n      scale: 1.05;\n      transition: all 0.3s ease-in-out;\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { StyledForm } from './ContactForm.styled';\n\nexport const ContactForm = ({ onAddContact, onDublicate }) => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const onInputChange = e => {\n    const name = e.target.name;\n    const value = e.target.value;\n    if (name === 'name') {\n      setName(value);\n    } else {\n      setNumber(value);\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const contactData = { name, number };\n    const isDublicate = onDublicate(name);\n    isDublicate\n      ? alert(`Attention! Name ${name} is already!`)\n      : onAddContact(contactData);\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <StyledForm onSubmit={handleSubmit}>\n      <label>\n        Name\n        <input\n          onChange={onInputChange}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label>\n        Phone number\n        <input\n          onChange={onInputChange}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          pattern=\"\\+?\\d{1,4}?[\\-.\\s]?\\(?\\d{1,3}?\\)?[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <button type=\"submit\">Add contact</button>\n    </StyledForm>\n  );\n};\n\nContactForm.propTypes = {\n  onAddContact: PropTypes.func.isRequired,\n  onDublicate: PropTypes.func.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const StyledSection = styled.section`\n  padding: 20px;\n  margin-top: 20px;\n  background-color: #fff;\n  border-radius: 5px;\n  border: 2px solid #ccc;\n  box-shadow: rgba(0, 0, 0, 0.12) 0px 6px 12px, rgba(0, 0, 0, 0.12) 0px 5px 5px;\n  & h2 {\n    font-size: 30px;\n    margin: 15px 0;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { StyledSection } from './Section.styled'\n\nconst Section = ({title, children}) => {\n  return (\n    <StyledSection>\n      {title && <h2 className = \"h2\">{title}</h2>}\n      {children}\n    </StyledSection>\n  )\n}\nSection.propTypes = {\n  children: PropTypes.node.isRequired,\n  title: PropTypes.string\n}\nexport default Section","import styled from 'styled-components';\n\nexport const StyledContactList = styled.ul`\n  width: 100%;\n  & li {\n    display: flex;\n    margin: 10px 0;\n    font-size: 20px;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const StyledContact = styled.li`\n  & button {\n    margin-top: 20px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    padding: 5px 10px;\n    background-color: #ccc;\n    color: black;\n    font-size: 20px;\n    cursor: pointer;\n    &:hover,\n    &:focus {\n      background-color: #fff;\n      color: #000;\n      border: 1px solid #ccc;\n      box-shadow: rgba(0, 0, 0, 0.12) 0px 6px 12px,\n        rgba(0, 0, 0, 0.12) 0px 5px 5px;\n      scale: 1.05;\n      transition: all 0.3s ease-in-out;\n    }\n  }\n\n  & span {\n    margin-top: 20px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    width: 80%;\n    padding: 5px 0 5px 10px;\n    font-size: 20px;\n    margin-right: 10px;\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { StyledContact } from './Contact.styled';\n\nconst Contact = ({ contact, onRemoveContact }) => {\n  return (\n    <StyledContact>\n      <span>\n        {contact.name} : {contact.number}\n      </span>\n      <button type=\"button\" onClick={() => onRemoveContact(contact.id)}>\n        Delete\n      </button>\n    </StyledContact>\n  );\n};\nContact.propTypes = {\n  onRemoveContact: PropTypes.func.isRequired,\n  contact: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    phone: PropTypes.string.isRequired,\n  }).isRequired,\n}.isRequired;\nexport default Contact;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { StyledContactList } from './ContactList.styled';\nimport Contact from 'components/Contact/Contact';\n\nconst ContactList = ({ contacts, onRemoveContact }) => {\n  const showContacts = Array.isArray(contacts) && contacts.length > 0;\n  return (\n    <StyledContactList>\n      {showContacts &&\n        contacts.map(contact => {\n          return (\n            <Contact\n              key={contact.id}\n              contact={contact}\n              onRemoveContact={onRemoveContact}\n            />\n          );\n        })}\n    </StyledContactList>\n  );\n};\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    })\n  ),\n  onRemoveContact: PropTypes.func.isRequired,\n};\nexport default ContactList;\n","import styled from 'styled-components';\n\nexport const StyledFilterBar = styled.label`\n  font-size: 20px;\n\n  & input {\n    margin-top: 20px;\n    height: 30px;\n    border-radius: 5px;\n    border: 1px solid #ddd;\n    width: 100%;\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { StyledFilterBar } from './FilterBar.styled';\n\nexport const FilterBar = ({ filter, onFilter }) => {\n  const handleInputChange = event => {\n    onFilter(event.target.value);\n  };\n\n  return (\n    <StyledFilterBar>\n      Find contact by name\n      <input\n        onChange={handleInputChange}\n        type=\"text\"\n        name=\"search\"\n        value={filter}\n      />\n    </StyledFilterBar>\n  );\n};\n\nFilterBar.propTypes = {\n  filter: PropTypes.string,\n  onFilter: PropTypes.func,\n}.isRequired;\n","import React, { useEffect } from 'react';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport Section from 'components/Section/Section';\nimport ContactList from 'components/ContactList/ContactList';\nimport { FilterBar } from 'components/FilterContact/FilterBar';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filterContact } from 'redux/contacts/contactsReducer';\nimport {\n  addContact,\n  deleteContact,\n  fetchContacts,\n} from 'redux/contacts/contactsOperations';\nimport Loader from 'components/Loader/Loader';\nimport withAuthRedirect from 'HOC/withAuthRedirect';\nimport {\n  selectContacts,\n  selectError,\n  selectFilter,\n  selectIsLoading,\n  selectUserData,\n} from 'redux/selectors';\n\nexport const Contacts = () => {\n  const userData = useSelector(selectUserData);\n  const filter = useSelector(selectFilter);\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!userData) return;\n\n    dispatch(fetchContacts());\n  }, [dispatch, userData]);\n\n  useEffect(() => {\n    if (!error) return;\n    alert(error);\n  }, [error]);\n\n  const onAddContact = contactData => {\n    dispatch(addContact(contactData));\n  };\n\n  const onDublicate = dublicated => {\n    const dublicate = contacts.filter(contact => contact.name === dublicated);\n    return dublicate.length > 0;\n  };\n\n  const onFilter = filterValue => {\n    dispatch(filterContact(filterValue));\n  };\n\n  const onRemoveContact = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  const filteredContact = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase().trim())\n  );\n\n  const showLoader = isLoading;\n  const showError = error;\n\n  return (\n    <div className=\"container\">\n      {showError && (\n        <div>\n          <p>Opps, some error occured... Error: {error}</p>\n        </div>\n      )}\n      {showLoader && <Loader />}\n      <Section title=\"Phonebook\">\n        <ContactForm onAddContact={onAddContact} onDublicate={onDublicate} />\n      </Section>\n      <Section title=\"Contacts\">\n        <FilterBar filter={filter} onFilter={onFilter} />\n        <ContactList\n          contacts={filteredContact}\n          onRemoveContact={onRemoveContact}\n        />\n      </Section>\n    </div>\n  );\n};\n\nexport default withAuthRedirect(Contacts);\n","import { useSelector } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\nimport { selectUserData } from 'redux/selectors';\n\nconst withAuthRedirect = SomeComponent => {\n  const PrivateComponent = props => {\n    const userData = useSelector(selectUserData);\n\n    return userData ? (\n      <SomeComponent {...props} />\n    ) : (\n      <Navigate replace={true} to={'/login'} />\n    );\n  };\n\n  return PrivateComponent;\n};\n\nexport default withAuthRedirect;\n"],"names":["StyledForm","styled","_templateObject","_taggedTemplateLiteral","ContactForm","_ref","onAddContact","onDublicate","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","number","setNumber","onInputChange","e","target","value","_jsxs","onSubmit","preventDefault","contactData","alert","concat","children","_jsx","onChange","type","pattern","title","required","StyledSection","className","StyledContactList","StyledContact","contact","onRemoveContact","onClick","id","contacts","showContacts","Array","isArray","length","map","Contact","StyledFilterBar","FilterBar","filter","onFilter","event","Contacts","userData","useSelector","selectUserData","selectFilter","selectContacts","isLoading","selectIsLoading","error","selectError","dispatch","useDispatch","useEffect","fetchContacts","filteredContact","toLowerCase","includes","trim","showLoader","showError","Loader","Section","addContact","dublicated","filterValue","filterContact","ContactList","contactId","deleteContact","SomeComponent","props","_objectSpread","Navigate","replace","to"],"sourceRoot":""}